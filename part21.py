#!/bin/python
from movielens import *
from math import *
import numpy as np
import clusters as clust
#from sklearn.metrics import mean_squared_error

# Store data in arrays
user = []
item = []
rating = []
rating_test = []

# Load the movie lens dataset into arrays
d = Dataset()
d.load_users("data/u.user", user)
d.load_items("data/u.item", item)
d.load_ratings("data/u.base", rating)
d.load_ratings("data/u.test", rating_test)
n_users = len(user)
n_items = len(item)

# The utility matrix stores the rating for each user-item pair in the matrix form.
# Note that the movielens data is indexed starting from 1 (instead of 0).
utility_old = np.zeros((n_users, n_items))
for r in rating:
    utility_old[r.user_id-1][r.item_id-1] = r.rating

#clustering of similar items i.e movies
k=100
#cluster_items = clust.kcluster(utility_old,n_users,n_items,k=100)
cluster_items = [[211, 518, 1581, 1652, 1673], [7, 131, 132, 133, 134, 135, 179, 186, 190, 198, 356, 426, 428, 434, 473, 477, 478, 479, 481, 482, 483, 484, 494, 495, 497, 509, 510, 519, 525, 602, 603, 632, 649, 658, 660, 661, 704], [278, 313, 441, 462, 732, 756, 781, 783, 785, 787, 790, 792, 798, 813, 821, 829, 837, 847, 849, 850, 851, 856, 860, 866, 867, 892], [534, 753, 1314, 1325, 1402, 1413, 1615], [165, 169, 189, 196, 212, 487, 491, 505, 508, 511, 513, 516, 528, 605, 606, 663, 706, 804, 810, 944, 1395, 1426], [56, 735, 897, 1079], [366, 708, 1660], [74, 378, 439, 453, 550, 562, 589, 705, 772, 816, 859, 972, 1422, 1441, 1443, 1507, 1521, 1541, 1542], [4, 272, 1128], [1098, 1121, 1123, 1317, 1366, 1371, 1401, 1472, 1473, 1528, 1554, 1618], [13, 18, 19, 58, 60, 115, 129, 220, 223, 243, 284, 285, 305, 318, 739, 752, 921, 959, 1004, 1008, 1330, 1403, 1591, 1655], [15, 371, 702, 922, 960, 1003, 1017, 1103, 1139, 1210, 1522], [360, 986, 991, 993, 1081, 1095, 1137, 1143, 1190, 1236, 1250, 1253, 1278, 1291, 1301, 1381, 1382, 1383, 1384, 1385, 1386, 1387, 1388, 1389, 1390, 1392, 1393, 1398, 1404, 1416, 1476, 1510, 1512, 1526, 1527, 1533, 1536, 1587, 1588, 1589, 1597, 1607, 1608, 1609, 1610, 1614, 1619, 1643, 1651, 1657, 1661, 1662, 1663, 1664, 1665, 1666, 1667, 1668, 1669], [317, 526, 651, 672, 696, 734, 958, 1111, 1400, 1681], [522, 1136], [36, 296, 319, 336, 344, 521, 532, 533, 888, 1021, 1069, 1070, 1084, 1102, 1142, 1153, 1155, 1158, 1183, 1263, 1352, 1513, 1535], [34, 62, 77, 111, 137, 375, 382, 394, 408, 476, 574, 576, 578, 584, 622, 721, 727, 730, 733, 754, 768, 774, 775, 780, 782, 784, 794, 795, 811, 943, 1035, 1036, 1052, 1054, 1414, 1468, 1479, 1502], [386, 563, 764, 807, 1147, 1423, 1509, 1654], [307, 677, 935, 936, 947, 987, 1007, 1623, 1624], [932, 977, 984, 1162, 1186, 1326, 1341, 1380, 1600], [117, 119, 120, 146, 251, 362, 404, 406, 471, 596, 684, 686, 825, 826, 830, 840, 863, 924, 925, 928, 929, 981, 983, 985, 1033, 1086, 1243, 1259, 1290], [136, 247, 275, 457, 458, 812, 949, 954, 1038, 1083], [], [25, 46, 51, 57, 64, 80, 82, 237, 316, 380, 424, 427, 536, 581, 630, 659, 701, 707, 714, 723, 728, 736, 769, 777, 791, 952, 955, 971, 1044, 1100], [260, 332, 681, 890, 1025], [102, 722, 802, 806, 1057, 1091, 1167, 1220, 1261, 1399, 1406, 1440, 1515, 1520], [176, 184, 204, 413, 429, 433, 465, 503, 520, 523, 524, 579, 641, 643, 645, 648, 653, 662, 700], [92, 486, 717, 1140, 1193, 1280, 1506, 1529, 1676], [0, 6, 49, 90, 113, 150, 168, 180, 188, 221, 234, 256, 407, 472, 595, 992], [12, 47, 1106, 1152], [105, 327, 328, 846, 1141, 1168, 1196, 1257, 1283], [265, 348, 350, 352, 358, 359, 361, 679, 680, 687, 748, 877, 884, 896, 907, 988, 989, 1126, 1233, 1237, 1242, 1292, 1431, 1432, 1433, 1590, 1611, 1612, 1616, 1670], [357, 369, 529, 919, 1198, 1303, 1308, 1309], [258, 271, 291, 300, 304, 309, 311, 312, 314, 315, 338, 346, 353, 538, 688, 690, 750, 872, 878, 885, 904, 1234, 1235], [20, 109, 253, 364, 376, 399, 414, 559, 570, 767, 827, 831, 838, 861, 931, 1002, 1028, 1029, 1031, 1032, 1034, 1088, 1177, 1208, 1218, 1238, 1270, 1284, 1286, 1335, 1412, 1424, 1495, 1508, 1516, 1530, 1539, 1543], [330, 833, 913, 914, 915, 916, 917, 937, 1161, 1188, 1299, 1311, 1425, 1427, 1469, 1482, 1494, 1593], [397, 724, 800, 995, 998, 999, 1000, 1022, 1042, 1048, 1075, 1101, 1164, 1178, 1179, 1180, 1181, 1182, 1184, 1223, 1241, 1248, 1269, 1281, 1282, 1336, 1408, 1434, 1439, 1445, 1467, 1538], [343, 345, 347, 349, 354, 881, 898, 899, 901, 902, 908, 1023, 1293, 1312, 1677, 1678, 1679], [28, 42, 83, 93, 138, 158, 365, 374, 425, 544, 548, 551, 560, 571, 626, 664, 738, 742, 757, 770, 773, 1001, 1041, 1089, 1138, 1206, 1207, 1209, 1216, 1247, 1272, 1656], [44, 126, 164, 170, 191, 461, 512, 514, 530, 588, 637, 638, 646, 655, 656, 854, 862, 1005, 1064, 1332], [5, 148, 250, 252, 765, 903, 926, 1006, 1067, 1085, 1096, 1170, 1175, 1201, 1240, 1322, 1334, 1343, 1367, 1369, 1374, 1376, 1627], [17, 112, 255, 295, 535, 593, 694, 697, 909, 910, 911, 912, 934, 961, 1061, 1099, 1105, 1107, 1127, 1130, 1154, 1157, 1160, 1172, 1173, 1185, 1191, 1192, 1195, 1212, 1213, 1222, 1232, 1244, 1251, 1254, 1255, 1256, 1265, 1267, 1295, 1318, 1321, 1350, 1355, 1377, 1378, 1379, 1394, 1405, 1417, 1435, 1444, 1447, 1461, 1464, 1465, 1474, 1489, 1498, 1500, 1505, 1531, 1534, 1537, 1548, 1552, 1559, 1577, 1584, 1599, 1601, 1604, 1606, 1622, 1628, 1629, 1630, 1631, 1632, 1633, 1634, 1635, 1636, 1637, 1638, 1639, 1640, 1641, 1642, 1644, 1645, 1646, 1647, 1648, 1649, 1650], [142, 299, 470, 654], [1, 16, 26, 32, 54, 61, 67, 79, 100, 183, 225, 230, 231, 232, 363, 372, 383, 387, 390, 396, 402, 430, 539, 540, 549, 553, 561, 569, 575, 577, 585, 635, 678, 718, 758, 778, 796, 801, 803, 808, 809, 848, 939, 975, 997, 1026, 1071, 1109, 1187, 1205, 1221, 1227, 1229, 1230, 1246, 1249, 1302, 1304, 1320, 1360, 1410, 1418, 1436, 1475, 1480, 1483, 1484, 1485, 1487, 1488, 1490, 1491, 1492, 1493, 1497, 1499], [389, 749, 1653], [199, 242, 1114, 1159, 1260], [351, 906, 927, 1344, 1429, 1430], [43, 76, 97, 163, 202, 217, 233, 355, 435, 442, 446, 447, 469, 1045], [325, 331, 698, 1517], [215, 496, 1598], [282, 693, 710, 994, 1116, 1354, 1532], [151, 152, 153, 155, 162, 167, 174, 178, 208, 213, 501, 628], [99, 685, 822, 1047, 1072], [254, 269, 292, 475, 747, 814, 1013, 1189], [219, 273, 277, 279, 619, 763, 818, 820, 845, 868, 933, 1040, 1050, 1053, 1056, 1060, 1149, 1151, 1211, 1262], [130, 480, 485, 488, 489, 490, 492, 493, 498, 502, 504, 506, 556, 583, 600, 601, 604, 607, 608, 609, 610, 611, 612, 613, 614, 615, 617, 629, 640, 652, 670, 674, 834, 835, 836, 964, 966, 967, 1019, 1049, 1115, 1124, 1125, 1171, 1202, 1203, 1268, 1285, 1297, 1298, 1450], [310, 537, 793, 920, 965, 1296, 1458, 1478, 1602], [9, 306, 557, 751, 1012, 1055, 1277], [280, 412, 870, 1039, 1156, 1166, 1231], [53, 145, 740, 1076, 1288, 1504], [161, 224, 246, 274, 644, 1030], [39, 48, 50, 65, 66, 71, 72, 84, 87, 89, 154, 157, 166, 216, 238, 385, 392, 398, 400, 401, 420, 432, 450, 552, 558, 657, 691, 709, 715, 720, 726, 731, 737, 745, 746, 779, 789, 940, 948, 1073, 1118, 1135, 1466], [259, 270, 342, 405], [436, 437, 438, 444, 445, 451, 452, 547, 554, 555, 564, 572, 586, 591, 592, 597, 598, 599, 620, 623, 625, 636, 642, 665, 666, 667, 669, 673, 676, 776, 857, 1145, 1176, 1226, 1289, 1305, 1306, 1307, 1333, 1358, 1407, 1544, 1545, 1547, 1549, 1551, 1553, 1555, 1556, 1558, 1560, 1561, 1562, 1563, 1564, 1565, 1566, 1567, 1568, 1569, 1570, 1571, 1573, 1574, 1575, 1576, 1578, 1579, 1580, 1582, 1583, 1585, 1586], [2, 40, 104, 121, 122, 239, 367, 368, 409, 410, 411, 455, 716, 755, 759, 762, 819, 823, 824, 832, 973, 974, 982, 1027, 1046, 1058, 1078, 1092, 1093, 1094, 1131, 1214, 1276, 1375], [370, 905, 1080, 1197, 1323, 1327, 1397, 1524, 1546, 1550, 1603, 1672], [23, 107, 108, 144, 200, 205, 248, 249, 454, 1051], [], [301, 326, 337, 895], [14, 24, 106, 110, 124, 276, 844, 923, 962], [3, 10, 11, 21, 30, 55, 63, 68, 78, 81, 86, 88, 95, 96, 143, 160, 171, 172, 173, 175, 182, 185, 187, 192, 194, 195, 201, 203, 209, 214, 240, 264, 384, 422, 565, 567, 650, 683], [127, 261, 546, 712, 891, 1409, 1621], [], [288, 334, 894, 930, 1239, 1419], [69, 85, 114, 206, 268, 946, 1486], [177, 193, 1146, 1617], [116, 281, 290, 293, 294, 297, 321, 322, 545, 695, 741, 1015], [226, 227, 228, 229, 379, 448, 449], [73, 159, 852, 853, 980, 1082, 1300, 1313, 1415, 1421, 1463, 1481, 1514, 1594, 1595, 1596, 1674, 1675], [70, 94, 98, 101, 139, 140, 141, 388, 391, 403, 415, 416, 417, 418, 419, 421, 431, 464, 500, 541, 587, 621, 624, 841, 842, 945, 950, 968, 1062, 1065, 1077, 1090, 1132], [871, 879, 990, 1471, 1671, 1680], [35, 395, 467, 786, 938, 1043, 1144, 1217, 1219, 1224, 1228, 1252, 1266, 1310, 1411, 1437, 1438, 1470, 1477, 1518, 1519], [22, 31, 38, 41, 75, 91, 181, 460, 466, 468, 517, 582, 692, 699, 771, 788, 805, 817, 855, 918, 941, 951, 1009, 1068, 1169, 1420], [156, 527, 631, 1117, 1129, 1134], [45, 52, 123, 197, 323, 580, 590, 627, 942, 1066, 1108], [27, 257, 377, 719, 725], [218, 423, 440, 443, 566, 568, 634, 671, 766, 797, 799, 815, 858, 1625], [103, 302, 689, 869, 886, 1163, 1258, 1271, 1316, 1319, 1324, 1328, 1331, 1338, 1339, 1340, 1342, 1346, 1347, 1348, 1349, 1351, 1353, 1356, 1357, 1362, 1363, 1364, 1365, 1370, 1372, 1373, 1605], [37, 647, 976, 1059, 1174, 1215, 1245, 1428, 1626], [262, 298, 456, 873, 1024, 1294, 1391], [128, 235, 245, 267, 320, 324, 333, 339, 459, 474, 507, 543, 843, 978, 1011, 1016], [149, 263, 289, 499, 618, 633, 711, 760, 761, 839, 864, 874, 996, 1225], [33, 329, 639, 1279, 1442, 1525, 1620], [266, 341, 373, 668, 875, 876, 880, 889, 893, 900, 1018, 1087, 1150, 1273, 1274, 1275], [308, 335, 340, 393, 573, 682, 882, 883, 887, 1037, 1074, 1104, 1264, 1287, 1315, 1501, 1503], [29, 59, 207, 210, 381, 463, 515, 542, 703, 713, 729, 953, 956, 957, 963, 970, 1110, 1112, 1165, 1194, 1200], [118, 616, 744, 969, 1014, 1020, 1063, 1119, 1120, 1122, 1148, 1199, 1204, 1329, 1345, 1359, 1368, 1396, 1446, 1448, 1449, 1451, 1452, 1453, 1454, 1455, 1456, 1457, 1459, 1460, 1462, 1511, 1523, 1540, 1557, 1572, 1592], [287, 531, 1097, 1133, 1496, 1613, 1658, 1659], [8, 222, 236, 241, 283, 286, 303, 675, 743, 979, 1010, 1337], [125, 147, 244, 594, 828, 865, 1113, 1361]]

utility = np.zeros((n_users, k))
for i in range(n_users):
	for j in range(k):
		sum1=0
		count=0
		q=len(cluster_items[j])
		for p in range(q):
			if utility_old[i][cluster_items[j][p]] != 0.0:
				sum1 += utility_old[i][cluster_items[j][p]]
				count += 1
		if count==0:
			utility[i][j]=0.0
		else:
			utility[i][j] = sum1/float(count)
print utility
				
# Finds the average rating for each user and stores it in the user's object
for i in range(n_users):
    rated = np.nonzero(utility[i])
    n = len(rated[0])
    if n != 0:
        user[i].avg_r = np.mean(utility[i][rated])
    else:
        user[i].avg_r = 0

 
# Finds the Pearson Correlation Similarity Measure between two users
def pcs(x, y):
 
# Find if 2 users have common ratings
    i_r = []
    for i in range(k):
        if utility[x][i] != 0 and utility[y][i] != 0:
            i_r.append(i)
 
# Calculate Pearson Correlation Coefficient
    if i_r:
 
        numerat = 0
        den_x = 0
        den_y = 0
        for i in range(len(i_r)):
            numerat = numerat + (utility[x][i_r[i]] - user[x].avg_r) * (utility[y][i_r[i]] - user[y].avg_r)
            den_x = den_x + (utility[x][i_r[i]] - user[x].avg_r)**2
            den_y = den_y + (utility[y][i_r[i]] - user[y].avg_r)**2
        denomin = (den_x**.5 * den_y**.5)
 
# Cannot divide by 0
 
        if numerat == 0 and denomin == 0:
            pearson_correlation = 1.0
        else:
            pearson_correlation = numerat/denomin
 
    else:
        pearson_correlation = 0
 
    return pearson_correlation
 
# Guesses the ratings that user with id, user_id, might give to item with id, i_id.
# We will consider the top_n similar users to do this. Use top_n as 3 in this example.
def guess(user_id, i_id, top_n):
 
    y = user_id - 1
    i_target = i_id - 1
    delta_mean = 0
    pcsm = []
 
# Find top_n of similar users in utility matrix to user y and have also rated i_id
    for i in range(n_users):
        if i != y :
            similar = pcs(i, y)
            if similar > 0 and utility[i][i_target] != 0:
                pcsm.append([i, similar])
    m = len(pcsm)
    # If m is greater than 0 calculate guess else guess is just mean of total y ratings
    if m != 0:
        if m > top_n:
            pcsm = sorted(pcsm, key = lambda x: float(x[1]))
            pcsm.reverse()
        # Will only focus on top_n similar users if there are more than top_n
            m = top_n
    # Calculate the delta_mean from tom_n similar users for i_target
        for i in range(m):
            delta_mean = delta_mean + (utility[pcsm[i][0]][i_target] - user[pcsm[i][0]].avg_r)
        delta_mean = delta_mean/float(m)
    # Determine guess based on mean of target user and delta_mean
        guess_target = user[y].avg_r + delta_mean
    else:
        guess_target = user[y].avg_r
 
    return guess_target
 
n=150
#mylist=[]
# Finds all the missing values of the utility matrix
utility_copy = np.copy(utility)
for i in range(n_users):
        for j in range(k):
            if utility_copy[i][j] == 0:
                utility_copy[i][j] = guess(i+1, j+1, n)

print utility_copy
mylist=[]
for p in range(n_users):
    for k in rating_test:
        for i in range(len(cluster_items)):
            for j in range(len(cluster_items[i])):
                if (k.item_id)-1 == cluster_items[i][j] and (k.user_id)-1 == p:
                        print "%d,%d,%f" %(p+1,cluster_items[i][j]+1,utility_copy[p][i]) #WTF man wrote utility instead of utility_copy and fucked up for one hour...!!!!
                        mylist.append(utility_copy[p][i])

guesses = np.array(mylist)
print guesses
print len(guesses)
mylist=[]
for i in rating_test:
    mylist.append(i.rating)

test = np.array(mylist)
print test
print len(test)
print np.mean(np.power((guesses-test),2))


